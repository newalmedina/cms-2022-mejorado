<?php

namespace App\Modules\{{modelNamePluralUpperCase}}\Tests\Feature;

use Tests\{{moduleTypeUpperCase}}TestCase;
use Illuminate\Support\Facades\DB;
use App\Modules\{{modelNamePluralUpperCase}}\Models\{{modelName}};
use Database\Seeders\{{modelNamePluralUpperCase}}PermissionSeeder;
use Illuminate\Database\Eloquent\SoftDeletes;


// Para llamar directamente a esta prueba
// ./vendor/bin/phpunit app/Modules/{{modelNamePluralUpperCase}}/tests/Feature/{{modelNamePluralUpperCase}}Test.php
// ./vendor/bin/phpunit --filter {{modelNamePluralUpperCase}}Test
// ./vendor/bin/phpunit --filter usuario_puede_crear_un_{{modelNamePluralUpperCase}}
// php artisan test --filter \App\Modules\{{modelNamePluralUpperCase}}\Tests\Feature\{{modelNamePluralUpperCase}}Test
// php artisan test --filter {{modelNamePluralUpperCase}}Test
// php artisan test --filter usuario_puede_crear_un_{{modelNamePluralUpperCase}}
// php artisan test --filter {{modelNamePluralUpperCase}}Test::usuario_puede_crear_un_{{modelNamePluralUpperCase}}

// <testsuite name="Feature">
// ...
// <directory suffix="Test.php">./app/Modules/{{modelNamePluralUpperCase}}/tests/Feature</directory>
// </testsuite>

class {{modelNamePluralUpperCase}}Test extends {{moduleTypeUpperCase}}TestCase
{
    private $requiredFields = [
         {{__fieldRequired__}}
    ];

    private $requiredFieldsLang = [
         {{__fieldRequiredLang__}}
    ];


    public function setUp(): void
    {
        parent::setUp();

        // Ejecutamos los seeders adicionales para
        // este grupo de tests.
        $this->seed([
            {{modelNamePluralUpperCase}}PermissionSeeder::class,
        ]);

        // Asignamos permisos al usuario autenticado
        // para que pueda ejecutar las acciones.
        $this->user->syncPermissions([
            '{{moduleTypeLowerCase}}-{{modelNamePluralLowerCase}}-list',
            '{{moduleTypeLowerCase}}-{{modelNamePluralLowerCase}}-create',
            '{{moduleTypeLowerCase}}-{{modelNamePluralLowerCase}}-update',
            '{{moduleTypeLowerCase}}-{{modelNamePluralLowerCase}}-delete',
            '{{moduleTypeLowerCase}}-{{modelNamePluralLowerCase}}-read',
        ]);
    }

    private function createObject() {
        return \App\Modules\{{modelNamePluralUpperCase}}\Models\{{modelName}}::factory()->create();
    }

    private function makeObject() {
        return \App\Modules\{{modelNamePluralUpperCase}}\Models\{{modelName}}::factory()->make();
    }

    private function cleanData($model)
    {
        foreach($this->requiredFields as $key) {
			$model->{$key} = "";
        }

        return $model;
    }
    private function modifyData($model)
    {
        $model->{{__key__}} = $this->faker->{{__keyFaker__}};

        return $model;
    }

    private function getResource($model, $with_lang=false) {
        // Devolvemos el modelo como un json controlado. El toArray() no sirve porque tenemos los
        // los parametros de POST diferente y tiene que ser en el formato del POST
        $data = [];
        foreach($this->requiredFields as $key) {
			$data[$key] = $model->{$key};
        }


        if($with_lang && !empty($this->requiredFieldsLang)) {
            $data["lang"][$this->locale] = [];

            $data["lang"][$this->locale]["id"] = empty($model->translate('es')->id)?null:$model->translate('es')->id;
            foreach($this->requiredFieldsLang as $key) {
                $data["lang"][$this->locale][$key] = $model->{$key};
            }
        }

        return $data;
    }

    /** @test */
    public function usuario_no_autenticado_no_puede_acceder()
    {
        // Debo ser invitado
        $this->assertGuest();

        // Llamamos a la ruta de listado
        $response = $this->get(route('{{modelNamePluralLowerCase}}.index'));

        // La respuesta debe ser 200 o 302
        // Si solo hay {{moduleTypeLowerCase}} hay una redirecciÃ³n por lo que la respuesta es 302
        $this->assertContains($response->getStatusCode(), array(200,302));

        // Miramos si la vista es la correcta
        $response->assertRedirect('/{{moduleTypeLowerCase}}/login');

    }

    /** @test */
    public function usuario_puede_leer_{{modelNamePluralLowerCase}}()
    {
        // Tenemos al menos un objeto en la base de datos
        ${{modelNameSingularLowerCase}} = $this->createObject();

        // El usuario visita el listado de objetos
        $response = $this->actingAs($this->user)->post('{{moduleTypeLowerCase}}/{{modelNamePluralLowerCase}}/list');

        // Veremos en el listado el objeto creado
        $response->assertSee(${{modelNameSingularLowerCase}}->{{__key__}});
    }

    /** @test */
    public function usuario_no_autenticado_no_puede_crear_un_{{modelNameSingularLowerCase}}()
    {

        // Debo ser invitado
        $this->assertGuest();

        // Creamos un objeto pero no lo insertamos
        ${{modelNameSingularLowerCase}} = $this->makeObject();

        //  El usuario crea el objeto y deberia enviarnos a login
        $this->post('{{moduleTypeLowerCase}}/{{modelNamePluralLowerCase}}',$this->getResource(${{modelNameSingularLowerCase}}, true))
            ->assertRedirect('/{{moduleTypeLowerCase}}/login');

    }

    /** @test */
    public function usuario_puede_crear_un_{{modelNameSingularLowerCase}}()
    {
        // Creamos un objeto pero no lo insertamos
        ${{modelNameSingularLowerCase}} = $this->makeObject();

        //  El usuario crea el objeto
        $this->actingAs($this->user)
            ->post('{{moduleTypeLowerCase}}/{{modelNamePluralLowerCase}}',$this->getResource(${{modelNameSingularLowerCase}}, true))
            ->assertSessionDoesntHaveErrors();


        // Leemos el numero de objetos en la base de datos
        $this->assertEquals(1, {{modelName}}::all()->count());

        // Verificamos que en la base de datos hay un registro con los datos creados
        $this->assertDatabaseHas('{{modelNamePluralLowerCase}}', $this->getResource(${{modelNameSingularLowerCase}}));

    }

    /** @test */
    public function usuario_no_puede_crear_un_{{modelNameSingularLowerCase}}_datos_incompletos()
    {
        // Creamos un objeto con datos incompletos
        ${{modelNameSingularLowerCase}} = new {{modelName}}();

        //  El usuario crea el objeto pero le dice que faltan los required
        $this->actingAs($this->user)->post('{{moduleTypeLowerCase}}/{{modelNamePluralLowerCase}}',$this->getResource(${{modelNameSingularLowerCase}}, true))
            ->assertSessionHasErrors($this->requiredFields);

    }

    /** @test */
    public function usuario_puede_editar_un_{{modelNameSingularLowerCase}}()
    {
        // Tenemos al menos un objeto en la base de datos
        ${{modelNameSingularLowerCase}} = $this->createObject();

        // El usuario edita el objeto
        $response = $this->actingAs($this->user)->get('{{moduleTypeLowerCase}}/{{modelNamePluralLowerCase}}/'.${{modelNameSingularLowerCase}}->id."/edit");

        // Vemos que se ven los datos
        $response->assertSee(${{modelNameSingularLowerCase}}->{{__key__}});
    }

    /** @test */
    public function usuario_no_autenticado_no_puede_editar_un_{{modelNameSingularLowerCase}}()
    {

        // Debo ser invitado
        $this->assertGuest();

        // Creamos un objeto
        ${{modelNameSingularLowerCase}} = $this->createObject();

        //  El usuario crea el objeto y deberia enviarnos a login
        $response = $this->put('/{{moduleTypeLowerCase}}/{{modelNamePluralLowerCase}}/'.${{modelNameSingularLowerCase}}->id, $this->getResource(${{modelNameSingularLowerCase}}, true))
            ->assertRedirect('/{{moduleTypeLowerCase}}/login');

    }

    /** @test */
    public function usuario_puede_modificar_un_{{modelNameSingularLowerCase}}()
    {
        // Creamos un objeto
        ${{modelNameSingularLowerCase}} = $this->createObject();

        // Modificamos algunos datos
        ${{modelNameSingularLowerCase}} = $this->modifyData(${{modelNameSingularLowerCase}});

        //  El usuario crea el objeto
        $this->actingAs($this->user)->put('/{{moduleTypeLowerCase}}/{{modelNamePluralLowerCase}}/'.${{modelNameSingularLowerCase}}->id, $this->getResource(${{modelNameSingularLowerCase}}, true));

        // Verificamos que en la base de datos hay un registro con los datos modificados
        $this->assertDatabaseHas('{{modelNamePluralLowerCase}}',
            $this->getResource(${{modelNameSingularLowerCase}})

        );

    }

    /** @test */
    public function usuario_no_puede_modificar_un_{{modelNameSingularLowerCase}}_datos_incompletos()
    {
        // Creamos un objeto
        ${{modelNameSingularLowerCase}} = $this->createObject();

        // Modificamos algunos datos
        ${{modelNameSingularLowerCase}} = $this->cleanData(${{modelNameSingularLowerCase}});


        //  El usuario crea el objeto pero le dice que faltan los required
        $response = $this->actingAs($this->user)->put('/{{moduleTypeLowerCase}}/{{modelNamePluralLowerCase}}/'.${{modelNameSingularLowerCase}}->id, $this->getResource(${{modelNameSingularLowerCase}}, true));

        $response->assertSessionHasErrors($this->requiredFields);
    }

    /** @test */
    public function usuario_no_autenticado_no_puede_borrar_un_{{modelNameSingularLowerCase}}()
    {

        // Debo ser invitado
        $this->assertGuest();

        // Creamos un objeto
        ${{modelNameSingularLowerCase}} = $this->createObject();

        //  El usuario crea el objeto y deberia enviarnos a login
        $response =  $this->delete('/{{moduleTypeLowerCase}}/{{modelNamePluralLowerCase}}/'.${{modelNameSingularLowerCase}}->id)
            ->assertRedirect('/{{moduleTypeLowerCase}}/login');

        // Verificamos que en la base de datos sigue estando el registro
        if (in_array(SoftDeletes::class, class_uses(get_class(${{modelNameSingularLowerCase}})))) {
            $this->assertDatabaseHas('{{modelNamePluralLowerCase}}', [
                'id' => ${{modelNameSingularLowerCase}}->id,
                'deleted_at' => null,
            ]);
        }
        else {
            $this->assertDatabaseHas('{{modelNamePluralLowerCase}}', ['id'=> ${{modelNameSingularLowerCase}}->id]);
        }
    }

    /** @test */
    public function usuario_puede_borrar_un_{{modelNameSingularLowerCase}}()
    {
        // Creamos un objeto
        ${{modelNameSingularLowerCase}} = $this->createObject();

        //  El usuario crea el objeto y deberia enviarnos a login
        $this->actingAs($this->user)->delete('/{{moduleTypeLowerCase}}/{{modelNamePluralLowerCase}}/'.${{modelNameSingularLowerCase}}->id) ;

        // Verificamos que en la base de datos no esta el registro
        if (in_array(SoftDeletes::class, class_uses(get_class(${{modelNameSingularLowerCase}})))) {
            $this->assertDatabaseHas('{{modelNamePluralLowerCase}}', [
                'id' => ${{modelNameSingularLowerCase}}->id,
                'deleted_at' => now(),
            ]);
        }
        else {
            $this->assertDatabaseMissing('{{modelNamePluralLowerCase}}', ['id'=> ${{modelNameSingularLowerCase}}->id]);
        }
    }
}
